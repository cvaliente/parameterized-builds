{namespace com.kylenicholls.stash.parameterizedbuilds.hook}

/**
 * @param? collapsed
 * @param? triggers
 * @param? class
 * @param? valid_triggers
 */
{template .setHideClasses}
    {let $is_trigger}
        {foreach $trigger in $valid_triggers}
            {if strContains($triggers, $trigger)}
                true
            {/if}
        {ifempty}
            false
        {/foreach}
    {/let}

    {if $collapsed and not $is_trigger}
        hidden {$class}
    {elseif $collapsed and $is_trigger}
        hidden
    {elseif not $collapsed and not $is_trigger}
        {$class}
    {/if}
{/template}

/**
 * @param? config
 * @param? errors
 */
{template .view}
    <div class="parameterized-builds">
        {if $errors and $errors['jenkins-admin-error']}
                <div class="field-group"><div class="error">{$errors['jenkins-admin-error']}</div></div>
        {/if}
        {let $configKeys: $config ? keys($config) : [] /}
        {let $visibleInputsCount: $configKeys.length > 0 ? ($configKeys.length / 8) : 1 /}
        {for $i in range($visibleInputsCount)}
            {call .addJob}
                {param canDelete: $visibleInputsCount > 1 /}
                {param count: $i /}
                {param jobName: $config and $config['jobName-' + $i] ? $config['jobName-' + $i] : null /}
                {param isTag: $config and $config['isTag-' + $i] ? $config['isTag-' + $i] : false /}
                {param triggers: $config and $config['triggers-' + $i] ? $config['triggers-' + $i] : null /}
                {param token: $config and $config['token-' + $i] ? $config['token-' + $i] : null /}
                {param buildParameters: $config and $config['buildParameters-' + $i] ? $config['buildParameters-' + $i] : null /}
                {param branchRegex: $config and $config['branchRegex-' + $i] ? $config['branchRegex-' + $i] : null /}
                {param pathRegex: $config and $config['pathRegex-' + $i] ? $config['pathRegex-' + $i] : null /}
                {param requirePermission: $config and $config['requirePermission-' + $i] ? $config['requirePermission-' + $i] : null /}
                {param errors: $errors ? $errors : null /}
                {param collapsed: not $errors and $configKeys.length > 0 /}
            {/call}
        {/for}
        <a id="add-job" href="#" title="Add job">
            {call aui.icons.icon}
                {param useIconFont: true /}
                {param size: 'small' /}
                {param icon: 'list-add' /}
            {/call}
        </a>
    </div>
{/template}

/**
 * @param canDelete
 * @param count
 * @param jobName
 * @param isTag
 * @param triggers
 * @param token
 * @param buildParameters
 * @param branchRegex
 * @param pathRegex
 * @param requirePermission
 * @param errors
 * @param collapsed
 */
{template .addJob}
    <div id="job-{$count}" class="job">
        <div class="delete-job {$canDelete ? 'inline-button' : 'hidden' }">
            <a href="#" title="Delete job">
                {call aui.icons.icon}
                    {param useIconFont: true /}
                    {param size: 'small' /}
                    {param icon: 'remove' /}
                {/call}
            </a>
        </div>
        <div class="toggle-job inline-button">
            <a href="#" title="Toggle job details">
                {call aui.icons.icon}
                    {param useIconFont: true /}
                    {param size: 'small' /}
                    {param icon: $collapsed ? 'collapsed' : 'expanded' /}
                {/call}
                {if $collapsed}{$jobName}{/if}
            </a>
        </div>
        {call aui.form.textField}
            {param id: 'jobName-' + $count /}
            {param value: $jobName /}
            {param labelContent: 'Job Name' /}
            {param errorTexts: $errors ? $errors['jobName-' + $count] : null /}
            {param isRequired: true /}
            {param extraClasses: $collapsed ? 'hidden' : '' /}
        {/call}
        {call aui.form.selectField}
            {param id: 'isTag-' + $count /}
            {param labelContent: 'Ref Type' /}
            {param value: $isTag /}
            {param options: [[
                    'text': 'branch',
                    'value': 'false'
                ],[
                    'text': 'tag',
                    'value': 'true'
                ]] /}
            {param extraClasses: $collapsed ? 'hidden' : '' /}
        {/call}
        <div class="field-group {$collapsed ? 'hidden' : ''}">
            <label for="trigger-buttons-{$count}">Triggers<span class="aui-icon icon-required"></span></label>
            <a class="branch-created" href="#" title="Triggers when new branches or tags are created"><span class="aui-lozenge {strContains($triggers, 'add;') ? 'aui-lozenge-success' : ''}">Ref Created</span></a>&nbsp;
            <a class="push-event" href="#" title="Triggers on branch push events"><span class="aui-lozenge {strContains($triggers, 'push;') ? 'aui-lozenge-success' : ''}">Push Event</span></a>&nbsp;
            <a class="manual" href="#" title="Adds a build button to the branch actions menu"><span class="aui-lozenge {strContains($triggers, 'manual;') ? 'aui-lozenge-success' : ''}">Manual</span></a>
            <br>
            <a class="branch-deleted" href="#" title="Triggers when a branch or tag is deleted"><span class="aui-lozenge {strContains($triggers, 'delete;') ? 'aui-lozenge-success' : ''}">Ref Deleted</span></a>&nbsp;
            <a class="pr-auto-merged" href="#" title="Triggers when a branch is merged via Bitbucket's Automatic Merge feature"><span class="aui-lozenge {strContains($triggers, 'prautomerged;') ? 'aui-lozenge-success' : ''}">Auto Merged</span></a>&nbsp;
            <a class="pr-opened" href="#" title="Triggers when a pull request is opened, re-opend, or rescoped"><span class="aui-lozenge {strContains($triggers, 'pullrequest;') ? 'aui-lozenge-success' : ''}">PR Opened</span></a>
            <br>
            <a class="pr-merged" href="#" title="Triggers when a pull request is merged"><span class="aui-lozenge {strContains($triggers, 'prmerged;') ? 'aui-lozenge-success' : ''}">PR Merged</span></a>&nbsp;
            <a class="pr-declined" href="#" title="Triggers when a pull request is declined"><span class="aui-lozenge {strContains($triggers, 'prdeclined;') ? 'aui-lozenge-success' : ''}">PR Declined</span></a>&nbsp;
            <a class="pr-deleted" href="#" title="Triggers when a pull request is deleted"><span class="aui-lozenge {strContains($triggers, 'prdeleted;') ? 'aui-lozenge-success' : ''}">PR Deleted</span></a>
            {if $errors and $errors['triggers-' + $count]}<div class="error">{$errors['triggers-' + $count]}</div>{/if}
        </div>
        {call aui.form.textField}
            {param id: 'triggers-' + $count /}
            {param value: $triggers /}
            {param labelContent: 'Triggers'  /}
            {param extraClasses: 'hide-trigger' /}
            {param errorTexts: $errors ? $errors['triggers-' + $count] : null /}
        {/call}
        {call aui.form.textField}
            {param id: 'token-' + $count /}
            {param value: $token /}
            {param labelContent: 'Token' /}
            {param descriptionText: 'Trigger builds remotely (e.g., from scripts) or leave blank to use user API token' /}
            {param errorTexts: $errors ? $errors['token-' + $count] : null /}
            {param extraClasses: $collapsed ? 'hidden' : '' /}
        {/call}
        {call aui.form.textareaField}
            {param id: 'buildParameters-' + $count /}
            {param value: $buildParameters /}
            {param labelContent: 'Build Parameters'  /}
            {param descriptionText: 'Key=Value pairs separated by new line.
                For choice parameters separate values with a semicolon. Available Bitbucket variables: $BRANCH, $COMMIT, $REPOSITORY, $PROJECT, $TRIGGER (for PR triggers also $PRID, $PRTITLE, $PRDESTINATION, $PRAUTHOR, $PRDESCRIPTION, $PRURL)'/}
            {param rows: 3 /}
            {param extraClass: 'long-field' /}
            {param fieldWidth: 'full-width' /}
            {param extraClasses: $collapsed ? 'hidden' : '' /}
        {/call}
        {let $branchClasses}
            {call .setHideClasses}
                {param collapsed: $collapsed /}
                {param triggers: $triggers /}
                {param valid_triggers: ['add;', 'delete;', 'push;'] /}
                {param class: 'hide-branches' /}
            {/call}
        {/let}
        {call aui.form.textField}
            {param id: 'branchRegex-' + $count /}
            {param value: $branchRegex /}
            {param labelContent: 'Ref Filter'  /}
            {param extraClass: 'long-field' /}
            {param fieldWidth: 'full-width' /}
            {param descriptionText: 'Trigger builds for matched branches or tags (example: "release.*|hotfix.*|production"). Supported triggers: REF CREATED, PUSH EVENT, REF DELETED' /}
            {param extraClasses: $branchClasses /}
        {/call}
        {let $pathClasses}
            {call .setHideClasses}
                {param collapsed: $collapsed /}
                {param triggers: $triggers /}
                {param valid_triggers: ['push;', 'pullrequest;', 'prmerged;', 'prdeclined;', 'prautomerged;', 'prdeleted;'] /}
                {param class: 'hide-paths' /}
            {/call}
        {/let}
        {call aui.form.textField}
            {param id: 'pathRegex-' + $count /}
            {param value: $pathRegex /}
            {param labelContent: 'Monitored Paths'  /}
            {param extraClass: 'long-field' /}
            {param fieldWidth: 'full-width' /}
            {param descriptionText: 'Trigger builds if matched files are modified (example: "directory/.*.txt|foobar/.*"). Supported triggers: AUTO MERGE, PUSH EVENT, PR OPENED, PR MERGED, PR DECLINED' /}
            {param extraClasses: $pathClasses /}
        {/call}
        {let $permissionsClasses}
            {call .setHideClasses}
                {param collapsed: $collapsed /}
                {param triggers: $triggers /}
                {param valid_triggers: ['manual;', ] /}
                {param class: 'hide-permissions' /}
            {/call}
        {/let}
        {call aui.form.selectField}
            {param id: 'requirePermission-' + $count /}
            {param value: $requirePermission /}
            {param labelContent: 'Required Build Permission' /}
            {param options: [[
                    'text': 'Read',
                    'value': 'REPO_READ'
                ],[
                    'text': 'Write',
                    'value': 'REPO_WRITE'
                ],[
                    'text': 'Admin',
                    'value': 'REPO_ADMIN'
                ]] /}
            {param descriptionText: 'Only allow users with the given repository permission or higher to trigger this job.' /}
            {param extraClasses: $permissionsClasses /}
        {/call}
        <hr>
    </div>
{/template}